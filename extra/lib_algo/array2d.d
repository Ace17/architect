/**
 * @file array2d.d
 * @brief A matrix class.
 * @author Sebastien Alaiwan
 * @date 2014-06-02
 */

// Copyright (C) 2015 - Sebastien Alaiwan
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

alias Matrix = array2d;

class array2d(T)
{
public:
  this(int w, int h)
  {
    m_width = w;
    m_height = h;
    m_data.length = w * h;
  }

  void set(int x, int y, T val)
  {
    assert(isInside(this, x, y));
    m_data[raster(x,y)] = val;
  }

  inout(T) get(int x, int y) inout
  {
    assert(isInside(this, x, y));
    return m_data[raster(x,y)];
  }

  inout(T)* getRef(int x, int y) inout
  {
    assert(isInside(this, x, y));
    return &m_data[raster(x,y)];
  }

  int getWidth() const
  {
    return m_width;
  }

  int getHeight() const
  {
    return m_height;
  }

  void scan(void delegate(int x, int y, ref T val) f)
  {
    for(int y=0; y < m_height; ++y)
      for(int x=0; x < m_width; ++x)
        f(x, y, m_data[raster(x,y)]);
  }

  void scan(void delegate(int x, int y, ref const(T) val) f) const
  {
    for(int y=0; y < m_height; ++y)
      for(int x=0; x < m_width; ++x)
        f(x, y, m_data[raster(x,y)]);
  }

private:

  int raster(int x, int y) const
  {
    return x + y * m_width;
  }

  const int m_width;
  const int m_height;
  T[] m_data;
}

bool isInside(T)(in Matrix!T a, int x, int y)
{
  return x >= 0 && x < a.getWidth() && y >= 0 && y < a.getHeight();
}

