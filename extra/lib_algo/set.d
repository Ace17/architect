/**
 * @file set.d
 * @brief Quick and dirty set container.
 * @author Sebastien Alaiwan
 * @date 2011-11-06
 */

// Copyright (C) 2015 - Sebastien Alaiwan
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

import std.string;
import std.conv;

unittest
{
  auto s = new set!int;
  assert(s.size() == 0);
  s.insert(1);
  s.insert(1);
  s.insert(3);
  s.insert(5);
  s.insert(7);
  assert(s.size() == 4);

  assert(s.exists(1));
  assert(s.exists(3));
  assert(s.exists(5));
  assert(s.exists(7));
  assert(!s.exists(0));

  s.remove(5);
  assert(s.size()==3);
  assert(!s.exists(5));
  assert(s.exists(1));
  assert(s.exists(3));
  assert(s.exists(7));

  s.clear();
  assert(!s.exists(7));
  assert(s.size()==0);
}

class set(T)
{
public:
  alias set!(T) myType;

  bool insert(T element)
  {
    if(exists(element))
      return false;
    m_Elements ~= element;
    return true;
  }

  void remove(T element)
  {
    foreach(i, e; m_Elements)
    {
      if(e == element)
      {
        m_Elements = m_Elements[0..i] ~ m_Elements[i+1..$];
        break;
      }
    }
  }

  void clear()
  {
    m_Elements.length = 0;
  }

  bool insert(myType otherSet)
  {
    bool bChanged = false;
    foreach(otherElement; otherSet)
    {
      if(insert(otherElement))
        bChanged = true;
    }
    return bChanged;
  }

  bool exists(T element) const
  {
    foreach(e; m_Elements)
    {
      if(e == element)
        return true;
    }
    return false;
  }

  uint size() const
  {
    return cast(uint)m_Elements.length;
  }

  T search(T element)
  {
    foreach(e; m_Elements)
    {
      if(e == element)
        return e;
    }
    return T.init;
  }

  bool equals(ref const(myType) otherSet)
  {
    foreach(element; m_Elements)
    {
      if(!otherSet.exists(element))
        return false;
    }
    return true;
  }

  override bool opEquals(Object o)
  {
    auto f = cast(set!(T)) o;
    if(f is null)
      return false;
    return equals(f);
  }

  int opApply(int delegate(ref T) dg)
  {
    foreach(index, element; m_Elements)
    {
      auto result = dg(element);
      if(result)
        return result;
    }
    return 0;
  }

  bool empty() const
  {
    return m_Elements.length == 0;
  }

  T pop()
  {
    assert(!empty());
    T element = m_Elements[$-1];
    m_Elements.length = m_Elements.length - 1;
    return element;
  }

  override string toString() const
  {
    string s;
    foreach(i,e; m_Elements)
    {
      if(i > 0)
        s ~= ", ";
      s ~= to!string(e);
    }
    return s;
  }

private:
  T[] m_Elements;
}

// vim: ts=2 sw=2 expandtab syntax=d
