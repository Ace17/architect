/**
 * @brief Queue container.
 * @author Sebastien Alaiwan
 */

// Copyright (C) 2015 - Sebastien Alaiwan
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

import std.conv;

unittest
{
  auto q = new queue!(int, 10);

  assert(q.empty());

  q.push(1);
  q.push(2);
  q.push(3);

  assert(q.count() == 3);

  assert(q.head() == 1);
  q.pop();

  assert(q.head() == 2);
  q.pop();

  assert(q.head() == 3);
  q.pop();

  assert(q.empty());
}

class queue(T, int SIZE)
{
public:
  void clear()
  {
    writePos = 0;
    readPos = 0;
  }

  bool empty() const
  {
    return (writePos == readPos);
  }

  bool full() const
  {
    return (writePos+1)%SIZE == readPos;
  }

  int count() const
  {
    return (writePos + SIZE - readPos) % SIZE;
  }

  const(T) head() const
  {
    assert(!empty());
    return m_Data[readPos];
  }

  T head()
  {
    assert(!empty());
    return m_Data[readPos];
  }

  void pop()
  {
    assert(!empty());
    readPos = (readPos+1)%SIZE;
  }

  void push(T v)
  {
    assert(!full());
    m_Data[writePos] = v;
    writePos = (writePos+1)%SIZE;
  }

  override string toString() const
  {
    string s;
    s ~= "[";
    for(int i=0; i < count(); ++i)
    {
      if(i>0)
        s ~= ", ";
      s ~= to!string(m_Data[(readPos+i) % SIZE]);
    }
    s ~= "]";
    return s;
  }

private:
  T[SIZE] m_Data;
  int writePos = 0;
  int readPos = 0;
}

// vim: ts=2 sw=2 expandtab syntax=d
